var searchIndex = JSON.parse('{\
"zed_cryptopals_challenge":{"doc":"Zed is working through Cryptopals Challenge","t":"AAAAAFAAFAFIIILLLKKKKLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLFLLLLLAFFFFAF","n":["challenges","codec","crack","utils","challenge_4","find_encrypted_string","adapter","b64","b64_to_hex_string","hex","hex_to_b64_string","CodePointMap","Codec","CodecAPI","encode","encode_to_string","get_chunksize","map_codepoint_to_plain","map_plain_to_codepoint","raw_encode","raw_to_plain","to_plain","to_plain_string","Base64","borrow","borrow_mut","clone","clone_into","from","get_chunksize","into","map_codepoint_to_plain","map_plain_to_codepoint","raw_encode","raw_to_plain","to_owned","to_plain","try_from","try_into","type_id","Hexadecimal","borrow","borrow_mut","clone","clone_into","from","get_chunksize","into","map_codepoint_to_plain","map_plain_to_codepoint","raw_encode","raw_to_plain","to_owned","try_from","try_into","type_id","DecryptResult","borrow","borrow_mut","clone","clone_into","fmt","from","get_decrypted_result","get_key","hamming_distance","into","to_owned","try_from","try_into","type_id","xor","ascii_score","brute","xor_decrypt","xor_encrypt","fs","read_file"],"q":[[0,"zed_cryptopals_challenge"],[4,"zed_cryptopals_challenge::challenges"],[5,"zed_cryptopals_challenge::challenges::challenge_4"],[6,"zed_cryptopals_challenge::codec"],[11,"zed_cryptopals_challenge::codec::adapter"],[23,"zed_cryptopals_challenge::codec::b64"],[40,"zed_cryptopals_challenge::codec::hex"],[56,"zed_cryptopals_challenge::crack"],[72,"zed_cryptopals_challenge::crack::xor"],[76,"zed_cryptopals_challenge::utils"],[77,"zed_cryptopals_challenge::utils::fs"]],"d":["One-off implementations for specific Cryptopals challenges.","Encoding formats implemented to provide encode and decode …","Implementation of various encryption and decryption tasks","Shared utilities for this crate. Shared utilities","Set 1/Challenge 4 …","One-off function to:","","","Convenience function that wraps the <code>encode_to_string</code> …","","Convenience function that wraps the <code>encode_to_string</code> …","","Codec adapter","","Encode a byte slice using CodecAPI::raw_encode.","Convenience function that wraps CodecAPI::encode to encode …","Helper that just stores and returns the number of bytes …","Provide a mapping from code points from the target …","Provide a mapping from plain text UTF-8 code points to …","Provide low-level transformation of content from one …","Provide low-level transformation of content from one …","Decode a byte slice using CodecAPI::raw_to_plain.","Convenience function that wraps CodecAPI::to_plain to …","","","","","","Returns the argument unchanged.","Set expected length of byte chunks to 3. See …","Calls <code>U::from(self)</code>.","","","Bitwise operations to expand data in 3-byte chunks …","","","Explicitly rewrite the …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","DecryptResult is used to store a decrypted vector of bytes,","","","","","","Returns the argument unchanged.","","","The Hamming distance between two byte slices is the number …","Calls <code>U::from(self)</code>.","","","","","","","Perform a brute force attack on <code>crypt_text</code> using a single …","Decrypt byte-slice of content with a given key, using …","XOR encrypts ASCII byte-slice <code>content</code> with an encoded byte …","Convenience wrappers for filesystem tasks.","Read the contents of a file"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,22,22,21,21,21,21,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,0,12,12,12,12,12,0,0,0,0,0,0,0],"f":[0,0,0,0,0,[1,2],0,0,[1,2],0,[1,2],0,0,0,[[[4,[3]]],[[5,[3]]]],[[[4,[3]]],2],[[],6],[3,[[7,[3]]]],[3,[[7,[3]]]],[[[4,[3]]],[[5,[3]]]],[[[4,[3]]],[[5,[3]]]],[[[4,[3]]],[[5,[3]]]],[[[4,[3]]],2],0,[[]],[[]],[8,8],[[]],[[]],[8,6],[[]],[[8,3],[[7,[3]]]],[[8,3],[[7,[3]]]],[[8,[4,[3]]],[[5,[3]]]],[[8,[4,[3]]],[[5,[3]]]],[[]],[[8,[4,[3]]],[[5,[3]]]],[[],9],[[],9],[[],10],0,[[]],[[]],[11,11],[[]],[[]],[11,6],[[]],[[11,3],[[7,[3]]]],[[11,3],[[7,[3]]]],[[11,[4,[3]]],[[5,[3]]]],[[11,[4,[3]]],[[5,[3]]]],[[]],[[],9],[[],9],[[],10],0,[[]],[[]],[12,12],[[]],[[12,13],14],[[]],[12,[[5,[3]]]],[12,[[5,[3]]]],[[[4,[3]],[4,[3]]],6],[[]],[[]],[[],9],[[],9],[[],10],0,[[[5,[3]]],6],[[[0,[15,16,17,18]],1],12],[[15,[4,[3]],[4,[3]]],[[5,[3]]]],[[15,[4,[3]],[4,[3]]],[[5,[3]]]],0,[[[20,[19]]],[[5,[2]]]]],"c":[],"p":[[15,"str"],[3,"String"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"usize"],[4,"Option"],[3,"Base64"],[4,"Result"],[3,"TypeId"],[3,"Hexadecimal"],[3,"DecryptResult"],[3,"Formatter"],[6,"Result"],[8,"Codec"],[8,"Copy"],[8,"Sync"],[8,"Send"],[3,"Path"],[8,"AsRef"],[8,"CodecAPI"],[8,"CodePointMap"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
